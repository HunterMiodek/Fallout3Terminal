#!/usr/bin/env bash

BASE_DIR="$(cd "$(dirname "$0")"; pwd)" || exit 2

# Password file path
PASSWORD_FILE="$BASE_DIR/password.txt"

# Function to set the initial password
set_initial_password() {
    read -sp "Set your password: " new_password
    echo  # Newline for formatting
    read -sp "Confirm your password: " confirm_password
    echo  # Newline for formatting

    if [[ "$new_password" == "$confirm_password" ]]; then
        echo "$new_password" > "$PASSWORD_FILE"
        echo "Password set successfully!"
        sleep 1
    else
        echo "Passwords do not match. Please try again."
        sleep 1
        set_initial_password
    fi
}

# Password checking function
check_password() {
    local attempts=3  # Number of attempts allowed
    if [[ ! -f "$PASSWORD_FILE" ]]; then
        set_initial_password
    fi

    PASSWORD=$(<"$PASSWORD_FILE")  # Read password from file

    while (( attempts > 0 )); do
        read -sp "Enter Password: " input_password
        echo  # Newline for formatting
        if [[ "$input_password" == "$PASSWORD" ]]; then
            echo "Access Granted!"
            sleep 1
            return 0
        else
            echo "Incorrect password. You have $((attempts - 1)) attempts remaining."
            ((attempts--))
        fi
    done

    # Display "Terminal Lockout" if all attempts fail
    clear
    echo  # Newline for spacing
    tput civis  # Hide the cursor for a cleaner look
    tput cup $(( $(tput lines) / 2 )) $(( ($(tput cols) - 14) / 2 ))  # Center text
    echo "Terminal Lockout"
    tput cnorm  # Restore cursor
    exit 1
}

# Change password function
change_password() {
    read -sp "Enter new password: " new_password
    echo  # Newline for formatting
    read -sp "Confirm new password: " confirm_password
    echo  # Newline for formatting

    if [[ "$new_password" == "$confirm_password" ]]; then
        echo "$new_password" > "$PASSWORD_FILE"
        echo "Password changed successfully!"
        sleep 1
    else
        echo "Passwords do not match. Password not changed."
        sleep 1
    fi
}

# Logout function
logout() {
    echo "Logging out..."
    sleep 1
    clear
    check_password  # Check password before returning to the main menu
    mainmenufunc     # Go directly to the main menu after successful login
}

IFS=$'\n'
entrylist=('Go Back')
rawentry="$(find $BASE_DIR/entries -type f)"
for i in $rawentry; do
    i=${i##*/}  # Remove the path, leave the filename only
    entrylist+=("$i")
done

COLUMNS=12

# This function is to display the top header in a centered alignment
display_center() {
    columns="$(tput cols)"
    while IFS= read -r line; do
        printf "%*s\n" $(( (${#line} + columns) / 2)) "$line"
    done < "$1"
}

# Custom "title header" at the top
greeter=$'
Federal Terminal  
___________________________________________________'

# Main Menu Screen
mainmenufunc() {
    clear
    display_center "$BASE_DIR/greeterheader.txt" | pv -qL 80
    echo "$greeter" | pv -qL 80
    echo What would you like to do? | pv -qL 80

    # Display the menu options
    COLUMNS=12
    select menuchoice in "View Journal Entries" "Log a Journal Entry" "Delete a Journal Entry" "Change Password" "Logout" "Proceed to Desktop"
    do
        case $menuchoice in
            "View Journal Entries")
                viewentriesfunc
                ;;
            "Log a Journal Entry")
                writeentryfunc
                ;;
            "Delete a Journal Entry")
                deleteentryfunc
                ;;
            "Change Password")
                change_password
                ;;
            "Logout")
                logout
                ;;
            "Proceed to Desktop")
                echo Goodbye!
                exit
                ;;
            *)
                ;;
        esac
    done
}

# Option 1 Menu, Viewing Journal Entries
viewentriesfunc() {
    entrylist=('Go Back')
    rawentry="$(find $BASE_DIR/entries -type f)"
    for i in $rawentry; do
        i=${i##*/}  # Remove the path, leave the filename only
        entrylist+=("$i")
    done

    # Display the Menu text
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo Which Journal Entry would you like to access? | pv -qL 80

    # Display the menu options
    COLUMNS=12
    select readoption in "${entrylist[@]}"
    do
        case $readoption in
            "Go Back")
                repeatmainmenufunc
                ;;
            *)
                ;;
        esac

        # Display the selected entry
        clear
        display_center "$BASE_DIR/greeterheader.txt"
        echo "$greeter"
        echo
        echo "$readoption:"  | pv -qL 80
        cat "$BASE_DIR/entries/$readoption" | pv -qL 80
        echo
        read -p "Press enter to continue"
        
        # Go back to main menu
        repeatmainmenufunc
    done
}

# Menu for writing an entry
writeentryfunc() {
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo "What would you like to name the entry?" | pv -qL 80

    # Read user input
    read entrynameinput

    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo Press CTRL+D to finalize entry | pv -qL 80
    echo $entrynameinput:  | pv -qL 80
    echo

    # Use cat text editor to write entries, ctrl+d to finish
    cat >"$BASE_DIR/entries/$entrynameinput"
    clear

    # Return to main menu
    repeatmainmenufunc
}

# Menu to delete an entry
deleteentryfunc() {
    entrylist=('Go Back')
    rawentry="$(find $BASE_DIR/entries -type f)"
    for i in $rawentry; do
        i=${i##*/}  # Remove the path, leave the filename only
        entrylist+=("$i")
    done

    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo Which Journal Entry would you like to delete? | pv -qL 80

    COLUMNS=12
    select readoption in "${entrylist[@]}"
    do
        case $readoption in
            "Go Back")
                repeatmainmenufunc
                ;;
            *)
                ;;
        esac

        clear
        display_center "$BASE_DIR/greeterheader.txt"
        echo "$greeter"
        echo
        echo "Delete $readoption? Type YES to continue" | pv -qL 80
        read confirmdeletion
        if [[ ${confirmdeletion^^} == "YES" ]]; then
            rm -f "$BASE_DIR/entries/$readoption"
            echo FILE DELETED!
            sleep 0.1
            repeatmainmenufunc
        else
            echo OPERATION CANCELLED
            sleep 0.2
            repeatmainmenufunc
        fi
    done
}

# Repeat main menu screen function without animations
repeatmainmenufunc() {
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo What would you like to do? | pv -qL 80
    COLUMNS=12
    select menuchoice in "View Journal Entries" "Log a Journal Entry" "Delete a Journal Entry" "Change Password" "Logout" "Proceed to Desktop"
    do
        case $menuchoice in
            "View Journal Entries")
                viewentriesfunc
                ;;
            "Log a Journal Entry")
                writeentryfunc
                ;;
            "Delete a Journal Entry")
                deleteentryfunc
                ;;
            "Change Password")
                change_password
                ;;
            "Logout")
                logout
                ;;
            "Proceed to Desktop")
                echo Goodbye!
                exit
                ;;
            *)
                ;;
        esac
    done
}

# Aesthetic startup
clear
echo Initializing boot... | pv -qL 80
sleep 0.4
echo Loading Federal Terminal OS...  | pv -qL 80
sleep 0.4
echo 64K RAM detected...  | pv -qL 80
sleep 0.4
echo Launching Interface...  | pv -qL 80
sleep 0.4
clear
echo $'

 _  _  ____  __     ___  __   _  _  ____ 
/ )( \(  __)(  )   / __)/  \ ( \/ )(  __)
\ /\ / ) _) / (_/\( (__(  O )/ \/ \ ) _) 
(_/\_)(____)\____/ \___)\__/ \_)(_/(____)
           
'
echo "=============================================="
sleep 1

# Go to the password check
check_password
# Go to the main menu
mainmenufunc
