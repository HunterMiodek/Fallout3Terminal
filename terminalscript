#!/usr/bin/env bash

BASE_DIR="$(cd "$(dirname "$0")"; pwd)" || exit 2

IFS=$'\n'
entrylist=('Go Back')
rawentry="$(find $BASE_DIR/entries -type f)"
for i in $rawentry; do
    i=${i##*/}
    entrylist+=("$i")
done

COLUMNS=12

# File to store the password
PASSWORD_FILE="$BASE_DIR/password.txt"

# Function to check if password file exists and prompt for password
check_password() {
    if [ ! -f "$PASSWORD_FILE" ]; then
        echo "Creating a new password..."
        read -sp "Enter a new password: " PASSWORD
        echo "$PASSWORD" > "$PASSWORD_FILE"
        echo -e "\nPassword set successfully."
        return 0  # Return 0 on success
    else
        read -sp "Enter your password: " PASSWORD
        local stored_password=$(<"$PASSWORD_FILE")
        if [[ "$PASSWORD" != "$stored_password" ]]; then
            echo -e "\nIncorrect password. Exiting."
            exit 1
        fi
    fi
    echo -e "\nAccess granted."
    return 0  # Return 0 on success
}

# Function to change password
change_password() {
    read -sp "Enter new password: " NEW_PASSWORD
    echo "$NEW_PASSWORD" > "$PASSWORD_FILE"
    echo -e "\nPassword changed successfully."
    sleep 1
    repeatmainmenufunc
}

# Function to log out
logout() {
    echo "Logging out..."
    sleep 1
    clear
    check_password  # Call check_password to return to the password screen
    mainmenufunc  # Add this line to go to the main menu after successful login
}

# This function is to display the top header in a centered alignment!
display_center() {
    columns="$(tput cols)"
    while IFS= read -r line; do
        printf "%*s\n" $(( (${#line} + columns) / 2)) "$line"
    done < "$1"
}

# This string is to be displayed as a custom "title header" at the top
greeter=$'
[Personal Terminal] 
___________________________________________________'

# Function to navigate the menu with arrow keys
navigate_menu() {
    local options=("$@")
    local selected=0

    while true; do
        clear
        display_center "$BASE_DIR/greeterheader.txt"
        echo "$greeter"
        echo "What would you like to do?"

        # Print menu options
        for i in "${!options[@]}"; do
            if [[ $i -eq $selected ]]; then
                echo -e "\e[1;32m> ${options[$i]}\e[0m"
            else
                echo "  ${options[$i]}"
            fi
        done

        # Capture user input
        read -sn1 key
        case "$key" in
            $'\x1b') # ESC sequence
                read -sn2 key
                case "$key" in
                    '[A') # Up arrow
                        ((selected--))
                        if [ $selected -lt 0 ]; then selected=$((${#options[@]} - 1)); fi
                        ;;
                    '[B') # Down arrow
                        ((selected++))
                        if [ $selected -ge ${#options[@]} ]; then selected=0; fi
                        ;;
                esac
                ;;
            "") # Enter key
                return $selected
                ;;
        esac
    done
}

# Main menu screen
mainmenufunc() {
    clear
    display_center "$BASE_DIR/greeterheader.txt" | pv -qL 80
    echo "$greeter" | pv -qL 80
    echo "What would you like to do?" | pv -qL 80

    options=("View Journal Entries" "Log a Journal Entry" "Delete a Journal Entry" "Change Password" "Log Out" "Proceed to Desktop")
    navigate_menu "${options[@]}"
    case $? in
        0)
            viewentriesfunc
            ;;
        1)
            writeentryfunc
            ;;
        2)
            deleteentryfunc
            ;;
        3)
            change_password
            ;;
        4)
            logout
            ;;
        5)
            echo "Goodbye!" && exit
            ;;
    esac
}

# Option 1 Menu, Viewing Journal Entries
viewentriesfunc() {
    entrylist=('Go Back')
    rawentry="$(find $BASE_DIR/entries -type f)"
    for i in $rawentry; do
        i=${i##*/}
        entrylist+=("$i")
    done

    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo "Which Journal Entry would you like to access?" | pv -qL 80

    navigate_menu "${entrylist[@]}"
    local selected=$?
    if [[ $selected -eq 0 ]]; then
        repeatmainmenufunc
    else
        readoption="${entrylist[$selected]}"
        clear
        display_center "$BASE_DIR/greeterheader.txt"
        echo "$greeter"
        echo
        echo "$readoption:" | pv -qL 80
        cat < "$BASE_DIR/entries/$readoption" | pv -qL 80
        echo
        read -p "Press enter to continue"
        repeatmainmenufunc
    fi
}

# Other functions (writeentryfunc, deleteentryfunc, etc.) can also use navigate_menu similarly
# ...
# You can replace other select menus with `navigate_menu` calls as well
# ...

# Some random aesthetic startup junk
clear
echo "Initializing boot..." | pv -qL 80
sleep 0.4
echo "Loading Federal Terminal OS..." | pv -qL 80
sleep 0.4
echo "64K RAM detected..." | pv -qL 80
sleep 0.4
echo "Launching Interface..." | pv -qL 80
sleep 0.4
clear
echo $'
 _    _  ____  __    ___  _____  __  __  ____ 
( \/\/ )( ___)(  )  / __)(  _  )(  \/  )( ___)
 )    (  )__)  )(__( (__  )(_)(  )    (  )__) 
(__/\__)(____)(____)\___)(_____)(_/\/\_)(____)
'
echo "==============================================" | pv -qL 50
sleep 1

# Go to the password check before accessing the main menu
check_password
mainmenufunc
