#!/usr/bin/env bash

BASE_DIR="$(cd "$(dirname "$0")"; pwd)" || exit 2

IFS=$'\n'
entrylist=('Go Back')
rawentry="$(find $BASE_DIR/entries -type f)"
for i in $rawentry; do
    i=${i##*/}
    entrylist+=("$i")
done

COLUMNS=12

# This function is to display the top header in a centered alignment
display_center(){
    columns="$(tput cols)"
    while IFS= read -r line; do
        printf "%*s\n" $(( (${#line} + columns) / 2)) "$line"
    done < "$1"
}

# This string is to be displayed as a custom "title header" at the top
greeter=$'
Personal Terminal 
___________________________________________________'

# Main Menu Screen
mainmenufunc () 
{
    clear

    # Display the Menu text
    display_center "$BASE_DIR/greeterheader.txt" | pv -qL 80
    echo "$greeter" | pv -qL 80
    echo What would you like to do? | pv -qL 80

    # Define the menu options
    options=("View Journal Entries" "Log a Journal Entry" "Delete a Journal Entry" "Network Settings" "Reboot Program" "Proceed to Desktop")

    # Use fzf to display the options
    menuchoice=$(printf "%s\n" "${options[@]}" | fzf --height=10 --border --layout=reverse)

    case $menuchoice in
        "View Journal Entries")
            viewentriesfunc
            ;;
        "Log a Journal Entry")
            writeentryfunc
            ;;
        "Delete a Journal Entry")
            deleteentryfunc
            ;;
        "Network Settings")
            networkfunc
            ;;
        "Reboot Program")
            rebootfunc
            ;;
        "Proceed to Desktop")
            echo Goodbye! && exit
            ;;
        *)
            repeatmainmenufunc
            ;;
    esac
}

# Option 1 Menu, Viewing Journal Entries
viewentriesfunc () 
{
    entrylist=('Go Back')
    rawentry="$(find $BASE_DIR/entries -type f)"
    for i in $rawentry; do
        i=${i##*/}
        entrylist+=("$i")
    done

    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    echo "Which Journal Entry would you like to access?" | pv -qL 80

    # Use fzf to select an entry
    readoption=$(printf "%s\n" "${entrylist[@]}" | fzf --height=10 --border --layout=reverse)

    case $readoption in
        "Go Back")
            repeatmainmenufunc
            ;;
        *)
            clear
            display_center "$BASE_DIR/greeterheader.txt"
            echo "$greeter"
            echo
            echo "$readoption:" | pv -qL 80
            cat "$BASE_DIR/entries/$readoption" | pv -qL 80
            echo
            read -p "Press enter to continue"
            repeatmainmenufunc
            ;;
    esac
}

# Menu for writing an entry
writeentryfunc () 
{
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    echo "What would you like to name the entry?" | pv -qL 80

    # Read user input for entry name
    read entrynameinput 

    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    echo "Press CTRL+D to finalise entry" | pv -qL 80
    echo "$entrynameinput:" | pv -qL 80
    echo

    # Use cat to create the entry
    cat >"$BASE_DIR/entries/$entrynameinput"
    cat "$BASE_DIR/entries/$entrynameinput"
    clear

    repeatmainmenufunc
}

# Menu to delete an entry
deleteentryfunc () 
{
    entrylist=('Go Back')
    rawentry="$(find $BASE_DIR/entries -type f)"
    for i in $rawentry; do
        i=${i##*/}
        entrylist+=("$i")
    done

    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    echo "Which Journal Entry would you like to delete?" | pv -qL 80

    # Use fzf to select an entry for deletion
    readoption=$(printf "%s\n" "${entrylist[@]}" | fzf --height=10 --border --layout=reverse)

    case $readoption in
        "Go Back")
            repeatmainmenufunc
            ;;
        *)
            clear
            display_center "$BASE_DIR/greeterheader.txt"
            echo "$greeter"
            echo
            echo "Delete $readoption? Type YES to continue" | pv -qL 80

            # Confirm deletion
            read confirmdeletion
            if [[ ${confirmdeletion^^} == "YES" ]]; then
                rm -f "$BASE_DIR/entries/$readoption"
                echo "FILE DELETED!"
                sleep 0.1
                repeatmainmenufunc
            else
                echo "OPERATION CANCELLED"
                sleep 0.2
                repeatmainmenufunc
            fi
            ;;
    esac
}

# Function to display network settings
networkfunc () 
{
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    echo "Fetching Network Settings..." | pv -qL 80
    echo

    # Display network information using ifconfig or ip addr
    if command -v ifconfig &> /dev/null; then
        ifconfig | pv -qL 80
    elif command -v ip &> /dev/null; then
        ip addr | pv -qL 80
    else
        echo "No network information tools found!" | pv -qL 80
    fi

    echo
    read -p "Press enter to return to the main menu"
    repeatmainmenufunc
}

# Function to reboot the program
rebootfunc () 
{
    echo "Rebooting program..." | pv -qL 80
    sleep 1
    exec "$0"  # Re-execute the current script
}

# Same as the main menu function, but without the animations
repeatmainmenufunc ()
{
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    echo What would you like to do? | pv -qL 80
    options=("View Journal Entries" "Log a Journal Entry" "Delete a Journal Entry" "Network Settings" "Reboot Program" "Proceed to Desktop")

    # Use fzf for repeated main menu
    menuchoice=$(printf "%s\n" "${options[@]}" | fzf --height=10 --border --layout=reverse)

    case $menuchoice in
        "View Journal Entries")
            viewentriesfunc
            ;;
        "Log a Journal Entry")
            writeentryfunc
            ;;
        "Delete a Journal Entry")
            deleteentryfunc
            ;;
        "Network Settings")
            networkfunc
            ;;
        "Reboot Program")
            rebootfunc
            ;;
        "Proceed to Desktop")
            echo Goodbye! && exit
            ;;
        *)
            repeatmainmenufunc
            ;;
    esac
}

# Some random aesthetic startup text
clear
echo "Initializing boot..." | pv -qL 80
sleep 0.4
echo "Loading Federal Terminal OS..."  | pv -qL 80
sleep 0.4
echo "64K RAM detected..."  | pv -qL 80
sleep 0.4
echo "Launching Interface..."  | pv -qL 80
sleep 0.4
clear
echo $'
 _  _  ____  __     ___  __   _  _  ____ 
/ )( \(  __)(  )   / __)/  \ ( \/ )(  __)
\ /\ / ) _) / (_/\( (__(  O )/ \/ \ ) _) 
(_/\_)(____)\____/ \___)\__/ \_)(_/(____)
'

echo "==============================================" | pv -qL 50
sleep 1

# Launch the main menu
mainmenufunc
